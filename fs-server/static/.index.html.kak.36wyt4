<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title> SovietSim </title>
        <style>
body {
  font-family: arial;
  flex-direction: column;
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
}
        </style>
    </head>
    <body>
        <canvas id="draw"></canvas>
    </body>
    <script>
        function get_size() {
            var w = window.innerWidth;
            var h = window.innerHeight - 20;

            return [w, h];
        }

        let canvas = document.getElementById("draw");
        let ctx = canvas.getContext("2d");

        var width = get_size()[0];
        var height = get_size()[1];

        canvas.width = width;
        canvas.height = height;

        ctx.textAlign = "center";
        ctx.font = "5px monospace";

        var LOG_BUF = "";
        amount = 0;

        fetch("agar.wasm")
            .then(response => response.arrayBuffer())
            .then(bytes => WebAssembly.instantiate(bytes, {
                env: {
                    u_put_char: (x, y, ch, fr, fg, fb) => {
                        ctx.fillStyle = `rgb(${fr & 255},${fg & 255},${fb & 255})`;
                        ctx.fillText(String.fromCharCode(ch), x, y);
                    },
                    u_put_circle: (x, y, r, fr, fg, fb) => {
                        ctx.fillStyle = `rgb(${fr & 255},${fg & 255},${fb & 255})`;
                        ctx.beginPath();
                        ctx.arc(x, y, r, 0, 2 * Math.PI);
                        ctx.closePath();
                        ctx.fill();
                    },
                    u_clear: () => {
                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                    },
                    u_log: ch => {
                        if (ch == 10) {
                            console.log(LOG_BUF);
                            LOG_BUF = "";
                        }
                        else {
                            LOG_BUF += String.fromCharCode(ch);
                        }
                    },
                    u_rand: () => {
                        return Math.random();
                    },
                    u_atan2: (y, x) => {
                        return Math.atan2(y, x);
                    }
                }
            }))
            .then(result => {
                result.instance.exports.start(width, height);
                document.body.addEventListener("mousemove", event => {
                    result.instance.exports.mouse_moved(event.x, event.y);
                });
                setInterval(result.instance.exports.tick, 1000 / 60);
                setInterval(result.instance.exports.redraw, 1000 * 10);
                setInterval(() => {
                    if (get_size()[0] !== width || get_size()[1] !== height) {
                        width = get_size()[0];
                        height = get_size()[1];

                        canvas.width = width;
                        canvas.height = height;

                        ctx.textAlign = "center";
                        ctx.font = "5px monospace";

                        result.instance.exports.resize(width, height);
                    }
                }, 50);

                // Start websocket
            })
    </script>
</html>
